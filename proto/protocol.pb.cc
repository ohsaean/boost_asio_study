// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gs_protocol {
class MessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Message> {
  public:
  const ::gs_protocol::ReqLogin* req_login_;
  const ::gs_protocol::ReqCreate* req_create_;
  const ::gs_protocol::ReqJoin* req_join_;
  const ::gs_protocol::ReqAction1* req_action1_;
  const ::gs_protocol::ReqQuit* req_quit_;
  const ::gs_protocol::ReqRoomList* req_room_list_;
  const ::gs_protocol::ResLogin* res_login_;
  const ::gs_protocol::ResCreate* res_create_;
  const ::gs_protocol::ResJoin* res_join_;
  const ::gs_protocol::ResAction1* res_action1_;
  const ::gs_protocol::ResQuit* res_quit_;
  const ::gs_protocol::ResRoomList* res_room_list_;
  const ::gs_protocol::NotifyJoinMsg* notify_join_;
  const ::gs_protocol::NotifyAction1Msg* notify_action1_;
  const ::gs_protocol::NotifyQuitMsg* notify_quit_;
  const ::gs_protocol::ErrorMsg* error_;
} _Message_default_instance_;
class ReqLoginDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqLogin> {
} _ReqLogin_default_instance_;
class ReqCreateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqCreate> {
} _ReqCreate_default_instance_;
class ReqJoinDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqJoin> {
} _ReqJoin_default_instance_;
class ReqAction1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqAction1> {
} _ReqAction1_default_instance_;
class ReqQuitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqQuit> {
} _ReqQuit_default_instance_;
class ReqRoomListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReqRoomList> {
} _ReqRoomList_default_instance_;
class ResLoginDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResLogin> {
} _ResLogin_default_instance_;
class ResCreateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResCreate> {
} _ResCreate_default_instance_;
class ResJoinDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResJoin> {
} _ResJoin_default_instance_;
class ResAction1DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResAction1> {
} _ResAction1_default_instance_;
class ResQuitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResQuit> {
} _ResQuit_default_instance_;
class ResRoomListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResRoomList> {
} _ResRoomList_default_instance_;
class NotifyJoinMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyJoinMsg> {
} _NotifyJoinMsg_default_instance_;
class NotifyAction1MsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyAction1Msg> {
} _NotifyAction1Msg_default_instance_;
class NotifyQuitMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyQuitMsg> {
} _NotifyQuitMsg_default_instance_;
class ErrorMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ErrorMsg> {
} _ErrorMsg_default_instance_;

namespace protobuf_protocol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[17];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), req_login_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), req_create_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), req_join_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), req_action1_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), req_quit_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), req_room_list_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), res_login_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), res_create_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), res_join_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), res_action1_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), res_quit_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), res_room_list_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), notify_join_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), notify_action1_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), notify_quit_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Message_default_instance_), error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, userid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreate, userid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoin, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJoin, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAction1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAction1, userid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqQuit, userid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRoomList, userid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResLogin, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCreate, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResCreate, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoin, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoin, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResJoin, members_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAction1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAction1, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResAction1, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuit, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResQuit, issuccess_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRoomList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRoomList, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResRoomList, roomids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyJoinMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyJoinMsg, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyJoinMsg, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAction1Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAction1Msg, userid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyQuitMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyQuitMsg, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyQuitMsg, roomid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, errmessage_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Message)},
  { 21, -1, sizeof(ReqLogin)},
  { 26, -1, sizeof(ReqCreate)},
  { 31, -1, sizeof(ReqJoin)},
  { 37, -1, sizeof(ReqAction1)},
  { 42, -1, sizeof(ReqQuit)},
  { 47, -1, sizeof(ReqRoomList)},
  { 52, -1, sizeof(ResLogin)},
  { 58, -1, sizeof(ResCreate)},
  { 64, -1, sizeof(ResJoin)},
  { 71, -1, sizeof(ResAction1)},
  { 77, -1, sizeof(ResQuit)},
  { 83, -1, sizeof(ResRoomList)},
  { 89, -1, sizeof(NotifyJoinMsg)},
  { 95, -1, sizeof(NotifyAction1Msg)},
  { 100, -1, sizeof(NotifyQuitMsg)},
  { 106, -1, sizeof(ErrorMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqJoin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqAction1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqQuit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReqRoomList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResLogin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResJoin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResAction1_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResQuit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResRoomList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyJoinMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyAction1Msg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyQuitMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ErrorMsg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

}  // namespace

void TableStruct::Shutdown() {
  _Message_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ReqLogin_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ReqCreate_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ReqJoin_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ReqAction1_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ReqQuit_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ReqRoomList_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ResLogin_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ResCreate_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ResJoin_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _ResAction1_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ResQuit_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ResRoomList_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _NotifyJoinMsg_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _NotifyAction1Msg_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _NotifyQuitMsg_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _ErrorMsg_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Message_default_instance_.DefaultConstruct();
  _ReqLogin_default_instance_.DefaultConstruct();
  _ReqCreate_default_instance_.DefaultConstruct();
  _ReqJoin_default_instance_.DefaultConstruct();
  _ReqAction1_default_instance_.DefaultConstruct();
  _ReqQuit_default_instance_.DefaultConstruct();
  _ReqRoomList_default_instance_.DefaultConstruct();
  _ResLogin_default_instance_.DefaultConstruct();
  _ResCreate_default_instance_.DefaultConstruct();
  _ResJoin_default_instance_.DefaultConstruct();
  _ResAction1_default_instance_.DefaultConstruct();
  _ResQuit_default_instance_.DefaultConstruct();
  _ResRoomList_default_instance_.DefaultConstruct();
  _NotifyJoinMsg_default_instance_.DefaultConstruct();
  _NotifyAction1Msg_default_instance_.DefaultConstruct();
  _NotifyQuitMsg_default_instance_.DefaultConstruct();
  _ErrorMsg_default_instance_.DefaultConstruct();
  _Message_default_instance_.req_login_ = const_cast< ::gs_protocol::ReqLogin*>(
      ::gs_protocol::ReqLogin::internal_default_instance());
  _Message_default_instance_.req_create_ = const_cast< ::gs_protocol::ReqCreate*>(
      ::gs_protocol::ReqCreate::internal_default_instance());
  _Message_default_instance_.req_join_ = const_cast< ::gs_protocol::ReqJoin*>(
      ::gs_protocol::ReqJoin::internal_default_instance());
  _Message_default_instance_.req_action1_ = const_cast< ::gs_protocol::ReqAction1*>(
      ::gs_protocol::ReqAction1::internal_default_instance());
  _Message_default_instance_.req_quit_ = const_cast< ::gs_protocol::ReqQuit*>(
      ::gs_protocol::ReqQuit::internal_default_instance());
  _Message_default_instance_.req_room_list_ = const_cast< ::gs_protocol::ReqRoomList*>(
      ::gs_protocol::ReqRoomList::internal_default_instance());
  _Message_default_instance_.res_login_ = const_cast< ::gs_protocol::ResLogin*>(
      ::gs_protocol::ResLogin::internal_default_instance());
  _Message_default_instance_.res_create_ = const_cast< ::gs_protocol::ResCreate*>(
      ::gs_protocol::ResCreate::internal_default_instance());
  _Message_default_instance_.res_join_ = const_cast< ::gs_protocol::ResJoin*>(
      ::gs_protocol::ResJoin::internal_default_instance());
  _Message_default_instance_.res_action1_ = const_cast< ::gs_protocol::ResAction1*>(
      ::gs_protocol::ResAction1::internal_default_instance());
  _Message_default_instance_.res_quit_ = const_cast< ::gs_protocol::ResQuit*>(
      ::gs_protocol::ResQuit::internal_default_instance());
  _Message_default_instance_.res_room_list_ = const_cast< ::gs_protocol::ResRoomList*>(
      ::gs_protocol::ResRoomList::internal_default_instance());
  _Message_default_instance_.notify_join_ = const_cast< ::gs_protocol::NotifyJoinMsg*>(
      ::gs_protocol::NotifyJoinMsg::internal_default_instance());
  _Message_default_instance_.notify_action1_ = const_cast< ::gs_protocol::NotifyAction1Msg*>(
      ::gs_protocol::NotifyAction1Msg::internal_default_instance());
  _Message_default_instance_.notify_quit_ = const_cast< ::gs_protocol::NotifyQuitMsg*>(
      ::gs_protocol::NotifyQuitMsg::internal_default_instance());
  _Message_default_instance_.error_ = const_cast< ::gs_protocol::ErrorMsg*>(
      ::gs_protocol::ErrorMsg::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016protocol.proto\022\013gs_protocol\"\376\005\n\007Messag"
      "e\022*\n\treq_login\030\001 \001(\0132\025.gs_protocol.ReqLo"
      "ginH\000\022,\n\nreq_create\030\002 \001(\0132\026.gs_protocol."
      "ReqCreateH\000\022(\n\010req_join\030\003 \001(\0132\024.gs_proto"
      "col.ReqJoinH\000\022.\n\013req_action1\030\004 \001(\0132\027.gs_"
      "protocol.ReqAction1H\000\022(\n\010req_quit\030\005 \001(\0132"
      "\024.gs_protocol.ReqQuitH\000\0221\n\rreq_room_list"
      "\030\006 \001(\0132\030.gs_protocol.ReqRoomListH\000\022*\n\tre"
      "s_login\030\007 \001(\0132\025.gs_protocol.ResLoginH\000\022,"
      "\n\nres_create\030\010 \001(\0132\026.gs_protocol.ResCrea"
      "teH\000\022(\n\010res_join\030\t \001(\0132\024.gs_protocol.Res"
      "JoinH\000\022.\n\013res_action1\030\n \001(\0132\027.gs_protoco"
      "l.ResAction1H\000\022(\n\010res_quit\030\013 \001(\0132\024.gs_pr"
      "otocol.ResQuitH\000\0221\n\rres_room_list\030\014 \001(\0132"
      "\030.gs_protocol.ResRoomListH\000\0221\n\013notify_jo"
      "in\030\r \001(\0132\032.gs_protocol.NotifyJoinMsgH\000\0227"
      "\n\016notify_action1\030\016 \001(\0132\035.gs_protocol.Not"
      "ifyAction1MsgH\000\0221\n\013notify_quit\030\017 \001(\0132\032.g"
      "s_protocol.NotifyQuitMsgH\000\022\'\n\005error\030\350\007 \001"
      "(\0132\025.gs_protocol.ErrorMsgH\000B\t\n\007payload\"\032"
      "\n\010ReqLogin\022\016\n\006userID\030\001 \001(\003\"\033\n\tReqCreate\022"
      "\016\n\006userID\030\001 \001(\003\")\n\007ReqJoin\022\016\n\006userID\030\001 \001"
      "(\003\022\016\n\006roomID\030\002 \001(\003\"\034\n\nReqAction1\022\016\n\006user"
      "ID\030\001 \001(\003\"\031\n\007ReqQuit\022\016\n\006userID\030\001 \001(\003\"\035\n\013R"
      "eqRoomList\022\016\n\006userID\030\001 \001(\003\"*\n\010ResLogin\022\016"
      "\n\006userID\030\001 \001(\003\022\016\n\006result\030\002 \001(\005\"+\n\tResCre"
      "ate\022\016\n\006userID\030\001 \001(\003\022\016\n\006roomID\030\002 \001(\003\":\n\007R"
      "esJoin\022\016\n\006userID\030\001 \001(\003\022\016\n\006roomID\030\002 \001(\003\022\017"
      "\n\007members\030\003 \003(\003\",\n\nResAction1\022\016\n\006userID\030"
      "\001 \001(\003\022\016\n\006result\030\002 \001(\005\",\n\007ResQuit\022\016\n\006user"
      "ID\030\001 \001(\003\022\021\n\tisSuccess\030\002 \001(\005\".\n\013ResRoomLi"
      "st\022\016\n\006userID\030\001 \001(\003\022\017\n\007roomIDs\030\002 \003(\003\"/\n\rN"
      "otifyJoinMsg\022\016\n\006userID\030\001 \001(\003\022\016\n\006roomID\030\002"
      " \001(\003\"\"\n\020NotifyAction1Msg\022\016\n\006userID\030\001 \001(\003"
      "\"/\n\rNotifyQuitMsg\022\016\n\006userID\030\001 \001(\003\022\016\n\006roo"
      "mID\030\002 \001(\003\"/\n\010ErrorMsg\022\017\n\007errCode\030\001 \001(\005\022\022"
      "\n\nerrMessage\030\002 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1466);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_protocol_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kReqLoginFieldNumber;
const int Message::kReqCreateFieldNumber;
const int Message::kReqJoinFieldNumber;
const int Message::kReqAction1FieldNumber;
const int Message::kReqQuitFieldNumber;
const int Message::kReqRoomListFieldNumber;
const int Message::kResLoginFieldNumber;
const int Message::kResCreateFieldNumber;
const int Message::kResJoinFieldNumber;
const int Message::kResAction1FieldNumber;
const int Message::kResQuitFieldNumber;
const int Message::kResRoomListFieldNumber;
const int Message::kNotifyJoinFieldNumber;
const int Message::kNotifyAction1FieldNumber;
const int Message::kNotifyQuitFieldNumber;
const int Message::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kReqLogin: {
      mutable_req_login()->::gs_protocol::ReqLogin::MergeFrom(from.req_login());
      break;
    }
    case kReqCreate: {
      mutable_req_create()->::gs_protocol::ReqCreate::MergeFrom(from.req_create());
      break;
    }
    case kReqJoin: {
      mutable_req_join()->::gs_protocol::ReqJoin::MergeFrom(from.req_join());
      break;
    }
    case kReqAction1: {
      mutable_req_action1()->::gs_protocol::ReqAction1::MergeFrom(from.req_action1());
      break;
    }
    case kReqQuit: {
      mutable_req_quit()->::gs_protocol::ReqQuit::MergeFrom(from.req_quit());
      break;
    }
    case kReqRoomList: {
      mutable_req_room_list()->::gs_protocol::ReqRoomList::MergeFrom(from.req_room_list());
      break;
    }
    case kResLogin: {
      mutable_res_login()->::gs_protocol::ResLogin::MergeFrom(from.res_login());
      break;
    }
    case kResCreate: {
      mutable_res_create()->::gs_protocol::ResCreate::MergeFrom(from.res_create());
      break;
    }
    case kResJoin: {
      mutable_res_join()->::gs_protocol::ResJoin::MergeFrom(from.res_join());
      break;
    }
    case kResAction1: {
      mutable_res_action1()->::gs_protocol::ResAction1::MergeFrom(from.res_action1());
      break;
    }
    case kResQuit: {
      mutable_res_quit()->::gs_protocol::ResQuit::MergeFrom(from.res_quit());
      break;
    }
    case kResRoomList: {
      mutable_res_room_list()->::gs_protocol::ResRoomList::MergeFrom(from.res_room_list());
      break;
    }
    case kNotifyJoin: {
      mutable_notify_join()->::gs_protocol::NotifyJoinMsg::MergeFrom(from.notify_join());
      break;
    }
    case kNotifyAction1: {
      mutable_notify_action1()->::gs_protocol::NotifyAction1Msg::MergeFrom(from.notify_action1());
      break;
    }
    case kNotifyQuit: {
      mutable_notify_quit()->::gs_protocol::NotifyQuitMsg::MergeFrom(from.notify_quit());
      break;
    }
    case kError: {
      mutable_error()->::gs_protocol::ErrorMsg::MergeFrom(from.error());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:gs_protocol.Message)
}

void Message::SharedCtor() {
  clear_has_payload();
  _cached_size_ = 0;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:gs_protocol.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[0].descriptor;
}

const Message& Message::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:gs_protocol.Message)
  switch (payload_case()) {
    case kReqLogin: {
      delete payload_.req_login_;
      break;
    }
    case kReqCreate: {
      delete payload_.req_create_;
      break;
    }
    case kReqJoin: {
      delete payload_.req_join_;
      break;
    }
    case kReqAction1: {
      delete payload_.req_action1_;
      break;
    }
    case kReqQuit: {
      delete payload_.req_quit_;
      break;
    }
    case kReqRoomList: {
      delete payload_.req_room_list_;
      break;
    }
    case kResLogin: {
      delete payload_.res_login_;
      break;
    }
    case kResCreate: {
      delete payload_.res_create_;
      break;
    }
    case kResJoin: {
      delete payload_.res_join_;
      break;
    }
    case kResAction1: {
      delete payload_.res_action1_;
      break;
    }
    case kResQuit: {
      delete payload_.res_quit_;
      break;
    }
    case kResRoomList: {
      delete payload_.res_room_list_;
      break;
    }
    case kNotifyJoin: {
      delete payload_.notify_join_;
      break;
    }
    case kNotifyAction1: {
      delete payload_.notify_action1_;
      break;
    }
    case kNotifyQuit: {
      delete payload_.notify_quit_;
      break;
    }
    case kError: {
      delete payload_.error_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.Message)
  clear_payload();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .gs_protocol.ReqLogin req_login = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.ReqCreate req_create = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.ReqJoin req_join = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req_join()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.ReqAction1 req_action1 = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req_action1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.ReqQuit req_quit = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req_quit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.ReqRoomList req_room_list = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req_room_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.ResLogin res_login = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res_login()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.ResCreate res_create = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res_create()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.ResJoin res_join = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res_join()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.ResAction1 res_action1 = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res_action1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.ResQuit res_quit = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res_quit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.ResRoomList res_room_list = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res_room_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.NotifyJoinMsg notify_join = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify_join()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.NotifyAction1Msg notify_action1 = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify_action1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.NotifyQuitMsg notify_quit = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notify_quit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gs_protocol.ErrorMsg error = 1000;
      case 1000: {
        if (tag == 8002u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.Message)
  // .gs_protocol.ReqLogin req_login = 1;
  if (has_req_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *payload_.req_login_, output);
  }

  // .gs_protocol.ReqCreate req_create = 2;
  if (has_req_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.req_create_, output);
  }

  // .gs_protocol.ReqJoin req_join = 3;
  if (has_req_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.req_join_, output);
  }

  // .gs_protocol.ReqAction1 req_action1 = 4;
  if (has_req_action1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *payload_.req_action1_, output);
  }

  // .gs_protocol.ReqQuit req_quit = 5;
  if (has_req_quit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *payload_.req_quit_, output);
  }

  // .gs_protocol.ReqRoomList req_room_list = 6;
  if (has_req_room_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *payload_.req_room_list_, output);
  }

  // .gs_protocol.ResLogin res_login = 7;
  if (has_res_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *payload_.res_login_, output);
  }

  // .gs_protocol.ResCreate res_create = 8;
  if (has_res_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *payload_.res_create_, output);
  }

  // .gs_protocol.ResJoin res_join = 9;
  if (has_res_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *payload_.res_join_, output);
  }

  // .gs_protocol.ResAction1 res_action1 = 10;
  if (has_res_action1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *payload_.res_action1_, output);
  }

  // .gs_protocol.ResQuit res_quit = 11;
  if (has_res_quit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *payload_.res_quit_, output);
  }

  // .gs_protocol.ResRoomList res_room_list = 12;
  if (has_res_room_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *payload_.res_room_list_, output);
  }

  // .gs_protocol.NotifyJoinMsg notify_join = 13;
  if (has_notify_join()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *payload_.notify_join_, output);
  }

  // .gs_protocol.NotifyAction1Msg notify_action1 = 14;
  if (has_notify_action1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *payload_.notify_action1_, output);
  }

  // .gs_protocol.NotifyQuitMsg notify_quit = 15;
  if (has_notify_quit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *payload_.notify_quit_, output);
  }

  // .gs_protocol.ErrorMsg error = 1000;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, *payload_.error_, output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.Message)
  // .gs_protocol.ReqLogin req_login = 1;
  if (has_req_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *payload_.req_login_, false, target);
  }

  // .gs_protocol.ReqCreate req_create = 2;
  if (has_req_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.req_create_, false, target);
  }

  // .gs_protocol.ReqJoin req_join = 3;
  if (has_req_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.req_join_, false, target);
  }

  // .gs_protocol.ReqAction1 req_action1 = 4;
  if (has_req_action1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *payload_.req_action1_, false, target);
  }

  // .gs_protocol.ReqQuit req_quit = 5;
  if (has_req_quit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *payload_.req_quit_, false, target);
  }

  // .gs_protocol.ReqRoomList req_room_list = 6;
  if (has_req_room_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *payload_.req_room_list_, false, target);
  }

  // .gs_protocol.ResLogin res_login = 7;
  if (has_res_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *payload_.res_login_, false, target);
  }

  // .gs_protocol.ResCreate res_create = 8;
  if (has_res_create()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *payload_.res_create_, false, target);
  }

  // .gs_protocol.ResJoin res_join = 9;
  if (has_res_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *payload_.res_join_, false, target);
  }

  // .gs_protocol.ResAction1 res_action1 = 10;
  if (has_res_action1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *payload_.res_action1_, false, target);
  }

  // .gs_protocol.ResQuit res_quit = 11;
  if (has_res_quit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *payload_.res_quit_, false, target);
  }

  // .gs_protocol.ResRoomList res_room_list = 12;
  if (has_res_room_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *payload_.res_room_list_, false, target);
  }

  // .gs_protocol.NotifyJoinMsg notify_join = 13;
  if (has_notify_join()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *payload_.notify_join_, false, target);
  }

  // .gs_protocol.NotifyAction1Msg notify_action1 = 14;
  if (has_notify_action1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *payload_.notify_action1_, false, target);
  }

  // .gs_protocol.NotifyQuitMsg notify_quit = 15;
  if (has_notify_quit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *payload_.notify_quit_, false, target);
  }

  // .gs_protocol.ErrorMsg error = 1000;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1000, *payload_.error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.Message)
  size_t total_size = 0;

  switch (payload_case()) {
    // .gs_protocol.ReqLogin req_login = 1;
    case kReqLogin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.req_login_);
      break;
    }
    // .gs_protocol.ReqCreate req_create = 2;
    case kReqCreate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.req_create_);
      break;
    }
    // .gs_protocol.ReqJoin req_join = 3;
    case kReqJoin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.req_join_);
      break;
    }
    // .gs_protocol.ReqAction1 req_action1 = 4;
    case kReqAction1: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.req_action1_);
      break;
    }
    // .gs_protocol.ReqQuit req_quit = 5;
    case kReqQuit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.req_quit_);
      break;
    }
    // .gs_protocol.ReqRoomList req_room_list = 6;
    case kReqRoomList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.req_room_list_);
      break;
    }
    // .gs_protocol.ResLogin res_login = 7;
    case kResLogin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.res_login_);
      break;
    }
    // .gs_protocol.ResCreate res_create = 8;
    case kResCreate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.res_create_);
      break;
    }
    // .gs_protocol.ResJoin res_join = 9;
    case kResJoin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.res_join_);
      break;
    }
    // .gs_protocol.ResAction1 res_action1 = 10;
    case kResAction1: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.res_action1_);
      break;
    }
    // .gs_protocol.ResQuit res_quit = 11;
    case kResQuit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.res_quit_);
      break;
    }
    // .gs_protocol.ResRoomList res_room_list = 12;
    case kResRoomList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.res_room_list_);
      break;
    }
    // .gs_protocol.NotifyJoinMsg notify_join = 13;
    case kNotifyJoin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.notify_join_);
      break;
    }
    // .gs_protocol.NotifyAction1Msg notify_action1 = 14;
    case kNotifyAction1: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.notify_action1_);
      break;
    }
    // .gs_protocol.NotifyQuitMsg notify_quit = 15;
    case kNotifyQuit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.notify_quit_);
      break;
    }
    // .gs_protocol.ErrorMsg error = 1000;
    case kError: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.error_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.payload_case()) {
    case kReqLogin: {
      mutable_req_login()->::gs_protocol::ReqLogin::MergeFrom(from.req_login());
      break;
    }
    case kReqCreate: {
      mutable_req_create()->::gs_protocol::ReqCreate::MergeFrom(from.req_create());
      break;
    }
    case kReqJoin: {
      mutable_req_join()->::gs_protocol::ReqJoin::MergeFrom(from.req_join());
      break;
    }
    case kReqAction1: {
      mutable_req_action1()->::gs_protocol::ReqAction1::MergeFrom(from.req_action1());
      break;
    }
    case kReqQuit: {
      mutable_req_quit()->::gs_protocol::ReqQuit::MergeFrom(from.req_quit());
      break;
    }
    case kReqRoomList: {
      mutable_req_room_list()->::gs_protocol::ReqRoomList::MergeFrom(from.req_room_list());
      break;
    }
    case kResLogin: {
      mutable_res_login()->::gs_protocol::ResLogin::MergeFrom(from.res_login());
      break;
    }
    case kResCreate: {
      mutable_res_create()->::gs_protocol::ResCreate::MergeFrom(from.res_create());
      break;
    }
    case kResJoin: {
      mutable_res_join()->::gs_protocol::ResJoin::MergeFrom(from.res_join());
      break;
    }
    case kResAction1: {
      mutable_res_action1()->::gs_protocol::ResAction1::MergeFrom(from.res_action1());
      break;
    }
    case kResQuit: {
      mutable_res_quit()->::gs_protocol::ResQuit::MergeFrom(from.res_quit());
      break;
    }
    case kResRoomList: {
      mutable_res_room_list()->::gs_protocol::ResRoomList::MergeFrom(from.res_room_list());
      break;
    }
    case kNotifyJoin: {
      mutable_notify_join()->::gs_protocol::NotifyJoinMsg::MergeFrom(from.notify_join());
      break;
    }
    case kNotifyAction1: {
      mutable_notify_action1()->::gs_protocol::NotifyAction1Msg::MergeFrom(from.notify_action1());
      break;
    }
    case kNotifyQuit: {
      mutable_notify_quit()->::gs_protocol::NotifyQuitMsg::MergeFrom(from.notify_quit());
      break;
    }
    case kError: {
      mutable_error()->::gs_protocol::ErrorMsg::MergeFrom(from.error());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// .gs_protocol.ReqLogin req_login = 1;
bool Message::has_req_login() const {
  return payload_case() == kReqLogin;
}
void Message::set_has_req_login() {
  _oneof_case_[0] = kReqLogin;
}
void Message::clear_req_login() {
  if (has_req_login()) {
    delete payload_.req_login_;
    clear_has_payload();
  }
}
 const ::gs_protocol::ReqLogin& Message::req_login() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.req_login)
  return has_req_login()
      ? *payload_.req_login_
      : ::gs_protocol::ReqLogin::default_instance();
}
::gs_protocol::ReqLogin* Message::mutable_req_login() {
  if (!has_req_login()) {
    clear_payload();
    set_has_req_login();
    payload_.req_login_ = new ::gs_protocol::ReqLogin;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.req_login)
  return payload_.req_login_;
}
::gs_protocol::ReqLogin* Message::release_req_login() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.req_login)
  if (has_req_login()) {
    clear_has_payload();
    ::gs_protocol::ReqLogin* temp = payload_.req_login_;
    payload_.req_login_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_req_login(::gs_protocol::ReqLogin* req_login) {
  clear_payload();
  if (req_login) {
    set_has_req_login();
    payload_.req_login_ = req_login;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.req_login)
}

// .gs_protocol.ReqCreate req_create = 2;
bool Message::has_req_create() const {
  return payload_case() == kReqCreate;
}
void Message::set_has_req_create() {
  _oneof_case_[0] = kReqCreate;
}
void Message::clear_req_create() {
  if (has_req_create()) {
    delete payload_.req_create_;
    clear_has_payload();
  }
}
 const ::gs_protocol::ReqCreate& Message::req_create() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.req_create)
  return has_req_create()
      ? *payload_.req_create_
      : ::gs_protocol::ReqCreate::default_instance();
}
::gs_protocol::ReqCreate* Message::mutable_req_create() {
  if (!has_req_create()) {
    clear_payload();
    set_has_req_create();
    payload_.req_create_ = new ::gs_protocol::ReqCreate;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.req_create)
  return payload_.req_create_;
}
::gs_protocol::ReqCreate* Message::release_req_create() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.req_create)
  if (has_req_create()) {
    clear_has_payload();
    ::gs_protocol::ReqCreate* temp = payload_.req_create_;
    payload_.req_create_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_req_create(::gs_protocol::ReqCreate* req_create) {
  clear_payload();
  if (req_create) {
    set_has_req_create();
    payload_.req_create_ = req_create;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.req_create)
}

// .gs_protocol.ReqJoin req_join = 3;
bool Message::has_req_join() const {
  return payload_case() == kReqJoin;
}
void Message::set_has_req_join() {
  _oneof_case_[0] = kReqJoin;
}
void Message::clear_req_join() {
  if (has_req_join()) {
    delete payload_.req_join_;
    clear_has_payload();
  }
}
 const ::gs_protocol::ReqJoin& Message::req_join() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.req_join)
  return has_req_join()
      ? *payload_.req_join_
      : ::gs_protocol::ReqJoin::default_instance();
}
::gs_protocol::ReqJoin* Message::mutable_req_join() {
  if (!has_req_join()) {
    clear_payload();
    set_has_req_join();
    payload_.req_join_ = new ::gs_protocol::ReqJoin;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.req_join)
  return payload_.req_join_;
}
::gs_protocol::ReqJoin* Message::release_req_join() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.req_join)
  if (has_req_join()) {
    clear_has_payload();
    ::gs_protocol::ReqJoin* temp = payload_.req_join_;
    payload_.req_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_req_join(::gs_protocol::ReqJoin* req_join) {
  clear_payload();
  if (req_join) {
    set_has_req_join();
    payload_.req_join_ = req_join;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.req_join)
}

// .gs_protocol.ReqAction1 req_action1 = 4;
bool Message::has_req_action1() const {
  return payload_case() == kReqAction1;
}
void Message::set_has_req_action1() {
  _oneof_case_[0] = kReqAction1;
}
void Message::clear_req_action1() {
  if (has_req_action1()) {
    delete payload_.req_action1_;
    clear_has_payload();
  }
}
 const ::gs_protocol::ReqAction1& Message::req_action1() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.req_action1)
  return has_req_action1()
      ? *payload_.req_action1_
      : ::gs_protocol::ReqAction1::default_instance();
}
::gs_protocol::ReqAction1* Message::mutable_req_action1() {
  if (!has_req_action1()) {
    clear_payload();
    set_has_req_action1();
    payload_.req_action1_ = new ::gs_protocol::ReqAction1;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.req_action1)
  return payload_.req_action1_;
}
::gs_protocol::ReqAction1* Message::release_req_action1() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.req_action1)
  if (has_req_action1()) {
    clear_has_payload();
    ::gs_protocol::ReqAction1* temp = payload_.req_action1_;
    payload_.req_action1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_req_action1(::gs_protocol::ReqAction1* req_action1) {
  clear_payload();
  if (req_action1) {
    set_has_req_action1();
    payload_.req_action1_ = req_action1;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.req_action1)
}

// .gs_protocol.ReqQuit req_quit = 5;
bool Message::has_req_quit() const {
  return payload_case() == kReqQuit;
}
void Message::set_has_req_quit() {
  _oneof_case_[0] = kReqQuit;
}
void Message::clear_req_quit() {
  if (has_req_quit()) {
    delete payload_.req_quit_;
    clear_has_payload();
  }
}
 const ::gs_protocol::ReqQuit& Message::req_quit() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.req_quit)
  return has_req_quit()
      ? *payload_.req_quit_
      : ::gs_protocol::ReqQuit::default_instance();
}
::gs_protocol::ReqQuit* Message::mutable_req_quit() {
  if (!has_req_quit()) {
    clear_payload();
    set_has_req_quit();
    payload_.req_quit_ = new ::gs_protocol::ReqQuit;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.req_quit)
  return payload_.req_quit_;
}
::gs_protocol::ReqQuit* Message::release_req_quit() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.req_quit)
  if (has_req_quit()) {
    clear_has_payload();
    ::gs_protocol::ReqQuit* temp = payload_.req_quit_;
    payload_.req_quit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_req_quit(::gs_protocol::ReqQuit* req_quit) {
  clear_payload();
  if (req_quit) {
    set_has_req_quit();
    payload_.req_quit_ = req_quit;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.req_quit)
}

// .gs_protocol.ReqRoomList req_room_list = 6;
bool Message::has_req_room_list() const {
  return payload_case() == kReqRoomList;
}
void Message::set_has_req_room_list() {
  _oneof_case_[0] = kReqRoomList;
}
void Message::clear_req_room_list() {
  if (has_req_room_list()) {
    delete payload_.req_room_list_;
    clear_has_payload();
  }
}
 const ::gs_protocol::ReqRoomList& Message::req_room_list() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.req_room_list)
  return has_req_room_list()
      ? *payload_.req_room_list_
      : ::gs_protocol::ReqRoomList::default_instance();
}
::gs_protocol::ReqRoomList* Message::mutable_req_room_list() {
  if (!has_req_room_list()) {
    clear_payload();
    set_has_req_room_list();
    payload_.req_room_list_ = new ::gs_protocol::ReqRoomList;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.req_room_list)
  return payload_.req_room_list_;
}
::gs_protocol::ReqRoomList* Message::release_req_room_list() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.req_room_list)
  if (has_req_room_list()) {
    clear_has_payload();
    ::gs_protocol::ReqRoomList* temp = payload_.req_room_list_;
    payload_.req_room_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_req_room_list(::gs_protocol::ReqRoomList* req_room_list) {
  clear_payload();
  if (req_room_list) {
    set_has_req_room_list();
    payload_.req_room_list_ = req_room_list;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.req_room_list)
}

// .gs_protocol.ResLogin res_login = 7;
bool Message::has_res_login() const {
  return payload_case() == kResLogin;
}
void Message::set_has_res_login() {
  _oneof_case_[0] = kResLogin;
}
void Message::clear_res_login() {
  if (has_res_login()) {
    delete payload_.res_login_;
    clear_has_payload();
  }
}
 const ::gs_protocol::ResLogin& Message::res_login() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.res_login)
  return has_res_login()
      ? *payload_.res_login_
      : ::gs_protocol::ResLogin::default_instance();
}
::gs_protocol::ResLogin* Message::mutable_res_login() {
  if (!has_res_login()) {
    clear_payload();
    set_has_res_login();
    payload_.res_login_ = new ::gs_protocol::ResLogin;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.res_login)
  return payload_.res_login_;
}
::gs_protocol::ResLogin* Message::release_res_login() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.res_login)
  if (has_res_login()) {
    clear_has_payload();
    ::gs_protocol::ResLogin* temp = payload_.res_login_;
    payload_.res_login_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_res_login(::gs_protocol::ResLogin* res_login) {
  clear_payload();
  if (res_login) {
    set_has_res_login();
    payload_.res_login_ = res_login;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.res_login)
}

// .gs_protocol.ResCreate res_create = 8;
bool Message::has_res_create() const {
  return payload_case() == kResCreate;
}
void Message::set_has_res_create() {
  _oneof_case_[0] = kResCreate;
}
void Message::clear_res_create() {
  if (has_res_create()) {
    delete payload_.res_create_;
    clear_has_payload();
  }
}
 const ::gs_protocol::ResCreate& Message::res_create() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.res_create)
  return has_res_create()
      ? *payload_.res_create_
      : ::gs_protocol::ResCreate::default_instance();
}
::gs_protocol::ResCreate* Message::mutable_res_create() {
  if (!has_res_create()) {
    clear_payload();
    set_has_res_create();
    payload_.res_create_ = new ::gs_protocol::ResCreate;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.res_create)
  return payload_.res_create_;
}
::gs_protocol::ResCreate* Message::release_res_create() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.res_create)
  if (has_res_create()) {
    clear_has_payload();
    ::gs_protocol::ResCreate* temp = payload_.res_create_;
    payload_.res_create_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_res_create(::gs_protocol::ResCreate* res_create) {
  clear_payload();
  if (res_create) {
    set_has_res_create();
    payload_.res_create_ = res_create;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.res_create)
}

// .gs_protocol.ResJoin res_join = 9;
bool Message::has_res_join() const {
  return payload_case() == kResJoin;
}
void Message::set_has_res_join() {
  _oneof_case_[0] = kResJoin;
}
void Message::clear_res_join() {
  if (has_res_join()) {
    delete payload_.res_join_;
    clear_has_payload();
  }
}
 const ::gs_protocol::ResJoin& Message::res_join() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.res_join)
  return has_res_join()
      ? *payload_.res_join_
      : ::gs_protocol::ResJoin::default_instance();
}
::gs_protocol::ResJoin* Message::mutable_res_join() {
  if (!has_res_join()) {
    clear_payload();
    set_has_res_join();
    payload_.res_join_ = new ::gs_protocol::ResJoin;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.res_join)
  return payload_.res_join_;
}
::gs_protocol::ResJoin* Message::release_res_join() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.res_join)
  if (has_res_join()) {
    clear_has_payload();
    ::gs_protocol::ResJoin* temp = payload_.res_join_;
    payload_.res_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_res_join(::gs_protocol::ResJoin* res_join) {
  clear_payload();
  if (res_join) {
    set_has_res_join();
    payload_.res_join_ = res_join;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.res_join)
}

// .gs_protocol.ResAction1 res_action1 = 10;
bool Message::has_res_action1() const {
  return payload_case() == kResAction1;
}
void Message::set_has_res_action1() {
  _oneof_case_[0] = kResAction1;
}
void Message::clear_res_action1() {
  if (has_res_action1()) {
    delete payload_.res_action1_;
    clear_has_payload();
  }
}
 const ::gs_protocol::ResAction1& Message::res_action1() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.res_action1)
  return has_res_action1()
      ? *payload_.res_action1_
      : ::gs_protocol::ResAction1::default_instance();
}
::gs_protocol::ResAction1* Message::mutable_res_action1() {
  if (!has_res_action1()) {
    clear_payload();
    set_has_res_action1();
    payload_.res_action1_ = new ::gs_protocol::ResAction1;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.res_action1)
  return payload_.res_action1_;
}
::gs_protocol::ResAction1* Message::release_res_action1() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.res_action1)
  if (has_res_action1()) {
    clear_has_payload();
    ::gs_protocol::ResAction1* temp = payload_.res_action1_;
    payload_.res_action1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_res_action1(::gs_protocol::ResAction1* res_action1) {
  clear_payload();
  if (res_action1) {
    set_has_res_action1();
    payload_.res_action1_ = res_action1;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.res_action1)
}

// .gs_protocol.ResQuit res_quit = 11;
bool Message::has_res_quit() const {
  return payload_case() == kResQuit;
}
void Message::set_has_res_quit() {
  _oneof_case_[0] = kResQuit;
}
void Message::clear_res_quit() {
  if (has_res_quit()) {
    delete payload_.res_quit_;
    clear_has_payload();
  }
}
 const ::gs_protocol::ResQuit& Message::res_quit() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.res_quit)
  return has_res_quit()
      ? *payload_.res_quit_
      : ::gs_protocol::ResQuit::default_instance();
}
::gs_protocol::ResQuit* Message::mutable_res_quit() {
  if (!has_res_quit()) {
    clear_payload();
    set_has_res_quit();
    payload_.res_quit_ = new ::gs_protocol::ResQuit;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.res_quit)
  return payload_.res_quit_;
}
::gs_protocol::ResQuit* Message::release_res_quit() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.res_quit)
  if (has_res_quit()) {
    clear_has_payload();
    ::gs_protocol::ResQuit* temp = payload_.res_quit_;
    payload_.res_quit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_res_quit(::gs_protocol::ResQuit* res_quit) {
  clear_payload();
  if (res_quit) {
    set_has_res_quit();
    payload_.res_quit_ = res_quit;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.res_quit)
}

// .gs_protocol.ResRoomList res_room_list = 12;
bool Message::has_res_room_list() const {
  return payload_case() == kResRoomList;
}
void Message::set_has_res_room_list() {
  _oneof_case_[0] = kResRoomList;
}
void Message::clear_res_room_list() {
  if (has_res_room_list()) {
    delete payload_.res_room_list_;
    clear_has_payload();
  }
}
 const ::gs_protocol::ResRoomList& Message::res_room_list() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.res_room_list)
  return has_res_room_list()
      ? *payload_.res_room_list_
      : ::gs_protocol::ResRoomList::default_instance();
}
::gs_protocol::ResRoomList* Message::mutable_res_room_list() {
  if (!has_res_room_list()) {
    clear_payload();
    set_has_res_room_list();
    payload_.res_room_list_ = new ::gs_protocol::ResRoomList;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.res_room_list)
  return payload_.res_room_list_;
}
::gs_protocol::ResRoomList* Message::release_res_room_list() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.res_room_list)
  if (has_res_room_list()) {
    clear_has_payload();
    ::gs_protocol::ResRoomList* temp = payload_.res_room_list_;
    payload_.res_room_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_res_room_list(::gs_protocol::ResRoomList* res_room_list) {
  clear_payload();
  if (res_room_list) {
    set_has_res_room_list();
    payload_.res_room_list_ = res_room_list;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.res_room_list)
}

// .gs_protocol.NotifyJoinMsg notify_join = 13;
bool Message::has_notify_join() const {
  return payload_case() == kNotifyJoin;
}
void Message::set_has_notify_join() {
  _oneof_case_[0] = kNotifyJoin;
}
void Message::clear_notify_join() {
  if (has_notify_join()) {
    delete payload_.notify_join_;
    clear_has_payload();
  }
}
 const ::gs_protocol::NotifyJoinMsg& Message::notify_join() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.notify_join)
  return has_notify_join()
      ? *payload_.notify_join_
      : ::gs_protocol::NotifyJoinMsg::default_instance();
}
::gs_protocol::NotifyJoinMsg* Message::mutable_notify_join() {
  if (!has_notify_join()) {
    clear_payload();
    set_has_notify_join();
    payload_.notify_join_ = new ::gs_protocol::NotifyJoinMsg;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.notify_join)
  return payload_.notify_join_;
}
::gs_protocol::NotifyJoinMsg* Message::release_notify_join() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.notify_join)
  if (has_notify_join()) {
    clear_has_payload();
    ::gs_protocol::NotifyJoinMsg* temp = payload_.notify_join_;
    payload_.notify_join_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_notify_join(::gs_protocol::NotifyJoinMsg* notify_join) {
  clear_payload();
  if (notify_join) {
    set_has_notify_join();
    payload_.notify_join_ = notify_join;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.notify_join)
}

// .gs_protocol.NotifyAction1Msg notify_action1 = 14;
bool Message::has_notify_action1() const {
  return payload_case() == kNotifyAction1;
}
void Message::set_has_notify_action1() {
  _oneof_case_[0] = kNotifyAction1;
}
void Message::clear_notify_action1() {
  if (has_notify_action1()) {
    delete payload_.notify_action1_;
    clear_has_payload();
  }
}
 const ::gs_protocol::NotifyAction1Msg& Message::notify_action1() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.notify_action1)
  return has_notify_action1()
      ? *payload_.notify_action1_
      : ::gs_protocol::NotifyAction1Msg::default_instance();
}
::gs_protocol::NotifyAction1Msg* Message::mutable_notify_action1() {
  if (!has_notify_action1()) {
    clear_payload();
    set_has_notify_action1();
    payload_.notify_action1_ = new ::gs_protocol::NotifyAction1Msg;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.notify_action1)
  return payload_.notify_action1_;
}
::gs_protocol::NotifyAction1Msg* Message::release_notify_action1() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.notify_action1)
  if (has_notify_action1()) {
    clear_has_payload();
    ::gs_protocol::NotifyAction1Msg* temp = payload_.notify_action1_;
    payload_.notify_action1_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_notify_action1(::gs_protocol::NotifyAction1Msg* notify_action1) {
  clear_payload();
  if (notify_action1) {
    set_has_notify_action1();
    payload_.notify_action1_ = notify_action1;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.notify_action1)
}

// .gs_protocol.NotifyQuitMsg notify_quit = 15;
bool Message::has_notify_quit() const {
  return payload_case() == kNotifyQuit;
}
void Message::set_has_notify_quit() {
  _oneof_case_[0] = kNotifyQuit;
}
void Message::clear_notify_quit() {
  if (has_notify_quit()) {
    delete payload_.notify_quit_;
    clear_has_payload();
  }
}
 const ::gs_protocol::NotifyQuitMsg& Message::notify_quit() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.notify_quit)
  return has_notify_quit()
      ? *payload_.notify_quit_
      : ::gs_protocol::NotifyQuitMsg::default_instance();
}
::gs_protocol::NotifyQuitMsg* Message::mutable_notify_quit() {
  if (!has_notify_quit()) {
    clear_payload();
    set_has_notify_quit();
    payload_.notify_quit_ = new ::gs_protocol::NotifyQuitMsg;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.notify_quit)
  return payload_.notify_quit_;
}
::gs_protocol::NotifyQuitMsg* Message::release_notify_quit() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.notify_quit)
  if (has_notify_quit()) {
    clear_has_payload();
    ::gs_protocol::NotifyQuitMsg* temp = payload_.notify_quit_;
    payload_.notify_quit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_notify_quit(::gs_protocol::NotifyQuitMsg* notify_quit) {
  clear_payload();
  if (notify_quit) {
    set_has_notify_quit();
    payload_.notify_quit_ = notify_quit;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.notify_quit)
}

// .gs_protocol.ErrorMsg error = 1000;
bool Message::has_error() const {
  return payload_case() == kError;
}
void Message::set_has_error() {
  _oneof_case_[0] = kError;
}
void Message::clear_error() {
  if (has_error()) {
    delete payload_.error_;
    clear_has_payload();
  }
}
 const ::gs_protocol::ErrorMsg& Message::error() const {
  // @@protoc_insertion_point(field_get:gs_protocol.Message.error)
  return has_error()
      ? *payload_.error_
      : ::gs_protocol::ErrorMsg::default_instance();
}
::gs_protocol::ErrorMsg* Message::mutable_error() {
  if (!has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_ = new ::gs_protocol::ErrorMsg;
  }
  // @@protoc_insertion_point(field_mutable:gs_protocol.Message.error)
  return payload_.error_;
}
::gs_protocol::ErrorMsg* Message::release_error() {
  // @@protoc_insertion_point(field_release:gs_protocol.Message.error)
  if (has_error()) {
    clear_has_payload();
    ::gs_protocol::ErrorMsg* temp = payload_.error_;
    payload_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_error(::gs_protocol::ErrorMsg* error) {
  clear_payload();
  if (error) {
    set_has_error();
    payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.Message.error)
}

bool Message::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void Message::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
Message::PayloadCase Message::payload_case() const {
  return Message::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLogin::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLogin::ReqLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.ReqLogin)
}
ReqLogin::ReqLogin(const ReqLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:gs_protocol.ReqLogin)
}

void ReqLogin::SharedCtor() {
  userid_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ReqLogin::~ReqLogin() {
  // @@protoc_insertion_point(destructor:gs_protocol.ReqLogin)
  SharedDtor();
}

void ReqLogin::SharedDtor() {
}

void ReqLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogin::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[1].descriptor;
}

const ReqLogin& ReqLogin::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqLogin* ReqLogin::New(::google::protobuf::Arena* arena) const {
  ReqLogin* n = new ReqLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.ReqLogin)
  userid_ = GOOGLE_LONGLONG(0);
}

bool ReqLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.ReqLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.ReqLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.ReqLogin)
  return false;
#undef DO_
}

void ReqLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.ReqLogin)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.ReqLogin)
}

::google::protobuf::uint8* ReqLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.ReqLogin)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.ReqLogin)
  return target;
}

size_t ReqLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.ReqLogin)
  size_t total_size = 0;

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.ReqLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.ReqLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.ReqLogin)
    MergeFrom(*source);
  }
}

void ReqLogin::MergeFrom(const ReqLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.ReqLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void ReqLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.ReqLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogin::CopyFrom(const ReqLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.ReqLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogin::IsInitialized() const {
  return true;
}

void ReqLogin::Swap(ReqLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLogin::InternalSwap(ReqLogin* other) {
  std::swap(userid_, other->userid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLogin::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqLogin

// int64 userID = 1;
void ReqLogin::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReqLogin::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ReqLogin.userID)
  return userid_;
}
void ReqLogin::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ReqLogin.userID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCreate::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCreate::ReqCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.ReqCreate)
}
ReqCreate::ReqCreate(const ReqCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:gs_protocol.ReqCreate)
}

void ReqCreate::SharedCtor() {
  userid_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ReqCreate::~ReqCreate() {
  // @@protoc_insertion_point(destructor:gs_protocol.ReqCreate)
  SharedDtor();
}

void ReqCreate::SharedDtor() {
}

void ReqCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCreate::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[2].descriptor;
}

const ReqCreate& ReqCreate::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqCreate* ReqCreate::New(::google::protobuf::Arena* arena) const {
  ReqCreate* n = new ReqCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.ReqCreate)
  userid_ = GOOGLE_LONGLONG(0);
}

bool ReqCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.ReqCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.ReqCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.ReqCreate)
  return false;
#undef DO_
}

void ReqCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.ReqCreate)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.ReqCreate)
}

::google::protobuf::uint8* ReqCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.ReqCreate)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.ReqCreate)
  return target;
}

size_t ReqCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.ReqCreate)
  size_t total_size = 0;

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.ReqCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.ReqCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.ReqCreate)
    MergeFrom(*source);
  }
}

void ReqCreate::MergeFrom(const ReqCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.ReqCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void ReqCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.ReqCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreate::CopyFrom(const ReqCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.ReqCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreate::IsInitialized() const {
  return true;
}

void ReqCreate::Swap(ReqCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCreate::InternalSwap(ReqCreate* other) {
  std::swap(userid_, other->userid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCreate::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqCreate

// int64 userID = 1;
void ReqCreate::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReqCreate::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ReqCreate.userID)
  return userid_;
}
void ReqCreate::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ReqCreate.userID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqJoin::kUserIDFieldNumber;
const int ReqJoin::kRoomIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqJoin::ReqJoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.ReqJoin)
}
ReqJoin::ReqJoin(const ReqJoin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:gs_protocol.ReqJoin)
}

void ReqJoin::SharedCtor() {
  ::memset(&userid_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
  _cached_size_ = 0;
}

ReqJoin::~ReqJoin() {
  // @@protoc_insertion_point(destructor:gs_protocol.ReqJoin)
  SharedDtor();
}

void ReqJoin::SharedDtor() {
}

void ReqJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqJoin::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[3].descriptor;
}

const ReqJoin& ReqJoin::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqJoin* ReqJoin::New(::google::protobuf::Arena* arena) const {
  ReqJoin* n = new ReqJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.ReqJoin)
  ::memset(&userid_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
}

bool ReqJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.ReqJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 roomID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.ReqJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.ReqJoin)
  return false;
#undef DO_
}

void ReqJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.ReqJoin)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roomid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.ReqJoin)
}

::google::protobuf::uint8* ReqJoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.ReqJoin)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roomid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.ReqJoin)
  return target;
}

size_t ReqJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.ReqJoin)
  size_t total_size = 0;

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqJoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.ReqJoin)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqJoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqJoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.ReqJoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.ReqJoin)
    MergeFrom(*source);
  }
}

void ReqJoin::MergeFrom(const ReqJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.ReqJoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void ReqJoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.ReqJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqJoin::CopyFrom(const ReqJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.ReqJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqJoin::IsInitialized() const {
  return true;
}

void ReqJoin::Swap(ReqJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqJoin::InternalSwap(ReqJoin* other) {
  std::swap(userid_, other->userid_);
  std::swap(roomid_, other->roomid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqJoin::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqJoin

// int64 userID = 1;
void ReqJoin::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReqJoin::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ReqJoin.userID)
  return userid_;
}
void ReqJoin::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ReqJoin.userID)
}

// int64 roomID = 2;
void ReqJoin::clear_roomid() {
  roomid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReqJoin::roomid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ReqJoin.roomID)
  return roomid_;
}
void ReqJoin::set_roomid(::google::protobuf::int64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ReqJoin.roomID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAction1::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAction1::ReqAction1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.ReqAction1)
}
ReqAction1::ReqAction1(const ReqAction1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:gs_protocol.ReqAction1)
}

void ReqAction1::SharedCtor() {
  userid_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ReqAction1::~ReqAction1() {
  // @@protoc_insertion_point(destructor:gs_protocol.ReqAction1)
  SharedDtor();
}

void ReqAction1::SharedDtor() {
}

void ReqAction1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAction1::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[4].descriptor;
}

const ReqAction1& ReqAction1::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqAction1* ReqAction1::New(::google::protobuf::Arena* arena) const {
  ReqAction1* n = new ReqAction1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAction1::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.ReqAction1)
  userid_ = GOOGLE_LONGLONG(0);
}

bool ReqAction1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.ReqAction1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.ReqAction1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.ReqAction1)
  return false;
#undef DO_
}

void ReqAction1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.ReqAction1)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.ReqAction1)
}

::google::protobuf::uint8* ReqAction1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.ReqAction1)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.ReqAction1)
  return target;
}

size_t ReqAction1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.ReqAction1)
  size_t total_size = 0;

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAction1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.ReqAction1)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAction1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAction1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.ReqAction1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.ReqAction1)
    MergeFrom(*source);
  }
}

void ReqAction1::MergeFrom(const ReqAction1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.ReqAction1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void ReqAction1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.ReqAction1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAction1::CopyFrom(const ReqAction1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.ReqAction1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAction1::IsInitialized() const {
  return true;
}

void ReqAction1::Swap(ReqAction1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAction1::InternalSwap(ReqAction1* other) {
  std::swap(userid_, other->userid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAction1::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAction1

// int64 userID = 1;
void ReqAction1::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReqAction1::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ReqAction1.userID)
  return userid_;
}
void ReqAction1::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ReqAction1.userID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqQuit::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqQuit::ReqQuit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.ReqQuit)
}
ReqQuit::ReqQuit(const ReqQuit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:gs_protocol.ReqQuit)
}

void ReqQuit::SharedCtor() {
  userid_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ReqQuit::~ReqQuit() {
  // @@protoc_insertion_point(destructor:gs_protocol.ReqQuit)
  SharedDtor();
}

void ReqQuit::SharedDtor() {
}

void ReqQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqQuit::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[5].descriptor;
}

const ReqQuit& ReqQuit::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqQuit* ReqQuit::New(::google::protobuf::Arena* arena) const {
  ReqQuit* n = new ReqQuit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqQuit::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.ReqQuit)
  userid_ = GOOGLE_LONGLONG(0);
}

bool ReqQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.ReqQuit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.ReqQuit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.ReqQuit)
  return false;
#undef DO_
}

void ReqQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.ReqQuit)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.ReqQuit)
}

::google::protobuf::uint8* ReqQuit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.ReqQuit)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.ReqQuit)
  return target;
}

size_t ReqQuit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.ReqQuit)
  size_t total_size = 0;

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqQuit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.ReqQuit)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqQuit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqQuit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.ReqQuit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.ReqQuit)
    MergeFrom(*source);
  }
}

void ReqQuit::MergeFrom(const ReqQuit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.ReqQuit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void ReqQuit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.ReqQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQuit::CopyFrom(const ReqQuit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.ReqQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQuit::IsInitialized() const {
  return true;
}

void ReqQuit::Swap(ReqQuit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqQuit::InternalSwap(ReqQuit* other) {
  std::swap(userid_, other->userid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqQuit::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqQuit

// int64 userID = 1;
void ReqQuit::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReqQuit::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ReqQuit.userID)
  return userid_;
}
void ReqQuit::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ReqQuit.userID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRoomList::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRoomList::ReqRoomList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.ReqRoomList)
}
ReqRoomList::ReqRoomList(const ReqRoomList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:gs_protocol.ReqRoomList)
}

void ReqRoomList::SharedCtor() {
  userid_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ReqRoomList::~ReqRoomList() {
  // @@protoc_insertion_point(destructor:gs_protocol.ReqRoomList)
  SharedDtor();
}

void ReqRoomList::SharedDtor() {
}

void ReqRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRoomList::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[6].descriptor;
}

const ReqRoomList& ReqRoomList::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReqRoomList* ReqRoomList::New(::google::protobuf::Arena* arena) const {
  ReqRoomList* n = new ReqRoomList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRoomList::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.ReqRoomList)
  userid_ = GOOGLE_LONGLONG(0);
}

bool ReqRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.ReqRoomList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.ReqRoomList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.ReqRoomList)
  return false;
#undef DO_
}

void ReqRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.ReqRoomList)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.ReqRoomList)
}

::google::protobuf::uint8* ReqRoomList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.ReqRoomList)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.ReqRoomList)
  return target;
}

size_t ReqRoomList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.ReqRoomList)
  size_t total_size = 0;

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRoomList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.ReqRoomList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqRoomList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRoomList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.ReqRoomList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.ReqRoomList)
    MergeFrom(*source);
  }
}

void ReqRoomList::MergeFrom(const ReqRoomList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.ReqRoomList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void ReqRoomList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.ReqRoomList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRoomList::CopyFrom(const ReqRoomList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.ReqRoomList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRoomList::IsInitialized() const {
  return true;
}

void ReqRoomList::Swap(ReqRoomList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRoomList::InternalSwap(ReqRoomList* other) {
  std::swap(userid_, other->userid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRoomList::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRoomList

// int64 userID = 1;
void ReqRoomList::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ReqRoomList::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ReqRoomList.userID)
  return userid_;
}
void ReqRoomList::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ReqRoomList.userID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResLogin::kUserIDFieldNumber;
const int ResLogin::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResLogin::ResLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.ResLogin)
}
ResLogin::ResLogin(const ResLogin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&userid_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:gs_protocol.ResLogin)
}

void ResLogin::SharedCtor() {
  ::memset(&userid_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&userid_) + sizeof(result_));
  _cached_size_ = 0;
}

ResLogin::~ResLogin() {
  // @@protoc_insertion_point(destructor:gs_protocol.ResLogin)
  SharedDtor();
}

void ResLogin::SharedDtor() {
}

void ResLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResLogin::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[7].descriptor;
}

const ResLogin& ResLogin::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResLogin* ResLogin::New(::google::protobuf::Arena* arena) const {
  ResLogin* n = new ResLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.ResLogin)
  ::memset(&userid_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&userid_) + sizeof(result_));
}

bool ResLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.ResLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.ResLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.ResLogin)
  return false;
#undef DO_
}

void ResLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.ResLogin)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.ResLogin)
}

::google::protobuf::uint8* ResLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.ResLogin)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.ResLogin)
  return target;
}

size_t ResLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.ResLogin)
  size_t total_size = 0;

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.ResLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const ResLogin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.ResLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.ResLogin)
    MergeFrom(*source);
  }
}

void ResLogin::MergeFrom(const ResLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.ResLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void ResLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.ResLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResLogin::CopyFrom(const ResLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.ResLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResLogin::IsInitialized() const {
  return true;
}

void ResLogin::Swap(ResLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResLogin::InternalSwap(ResLogin* other) {
  std::swap(userid_, other->userid_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResLogin::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResLogin

// int64 userID = 1;
void ResLogin::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResLogin::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ResLogin.userID)
  return userid_;
}
void ResLogin::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ResLogin.userID)
}

// int32 result = 2;
void ResLogin::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 ResLogin::result() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ResLogin.result)
  return result_;
}
void ResLogin::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ResLogin.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResCreate::kUserIDFieldNumber;
const int ResCreate::kRoomIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResCreate::ResCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.ResCreate)
}
ResCreate::ResCreate(const ResCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:gs_protocol.ResCreate)
}

void ResCreate::SharedCtor() {
  ::memset(&userid_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
  _cached_size_ = 0;
}

ResCreate::~ResCreate() {
  // @@protoc_insertion_point(destructor:gs_protocol.ResCreate)
  SharedDtor();
}

void ResCreate::SharedDtor() {
}

void ResCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResCreate::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[8].descriptor;
}

const ResCreate& ResCreate::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResCreate* ResCreate::New(::google::protobuf::Arena* arena) const {
  ResCreate* n = new ResCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.ResCreate)
  ::memset(&userid_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
}

bool ResCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.ResCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 roomID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.ResCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.ResCreate)
  return false;
#undef DO_
}

void ResCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.ResCreate)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roomid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.ResCreate)
}

::google::protobuf::uint8* ResCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.ResCreate)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roomid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.ResCreate)
  return target;
}

size_t ResCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.ResCreate)
  size_t total_size = 0;

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.ResCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const ResCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.ResCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.ResCreate)
    MergeFrom(*source);
  }
}

void ResCreate::MergeFrom(const ResCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.ResCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void ResCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.ResCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResCreate::CopyFrom(const ResCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.ResCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResCreate::IsInitialized() const {
  return true;
}

void ResCreate::Swap(ResCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResCreate::InternalSwap(ResCreate* other) {
  std::swap(userid_, other->userid_);
  std::swap(roomid_, other->roomid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResCreate::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResCreate

// int64 userID = 1;
void ResCreate::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResCreate::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ResCreate.userID)
  return userid_;
}
void ResCreate::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ResCreate.userID)
}

// int64 roomID = 2;
void ResCreate::clear_roomid() {
  roomid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResCreate::roomid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ResCreate.roomID)
  return roomid_;
}
void ResCreate::set_roomid(::google::protobuf::int64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ResCreate.roomID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResJoin::kUserIDFieldNumber;
const int ResJoin::kRoomIDFieldNumber;
const int ResJoin::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResJoin::ResJoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.ResJoin)
}
ResJoin::ResJoin(const ResJoin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      members_(from.members_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:gs_protocol.ResJoin)
}

void ResJoin::SharedCtor() {
  ::memset(&userid_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
  _cached_size_ = 0;
}

ResJoin::~ResJoin() {
  // @@protoc_insertion_point(destructor:gs_protocol.ResJoin)
  SharedDtor();
}

void ResJoin::SharedDtor() {
}

void ResJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResJoin::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[9].descriptor;
}

const ResJoin& ResJoin::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResJoin* ResJoin::New(::google::protobuf::Arena* arena) const {
  ResJoin* n = new ResJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.ResJoin)
  members_.Clear();
  ::memset(&userid_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
}

bool ResJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.ResJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 roomID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 members = 3;
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_members())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_members())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.ResJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.ResJoin)
  return false;
#undef DO_
}

void ResJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.ResJoin)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roomid(), output);
  }

  // repeated int64 members = 3;
  if (this->members_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_members_cached_byte_size_);
  }
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->members(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.ResJoin)
}

::google::protobuf::uint8* ResJoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.ResJoin)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roomid(), target);
  }

  // repeated int64 members = 3;
  if (this->members_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _members_cached_byte_size_, target);
  }
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->members(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.ResJoin)
  return target;
}

size_t ResJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.ResJoin)
  size_t total_size = 0;

  // repeated int64 members = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->members_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _members_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResJoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.ResJoin)
  GOOGLE_DCHECK_NE(&from, this);
  const ResJoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResJoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.ResJoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.ResJoin)
    MergeFrom(*source);
  }
}

void ResJoin::MergeFrom(const ResJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.ResJoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  members_.MergeFrom(from.members_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void ResJoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.ResJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResJoin::CopyFrom(const ResJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.ResJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResJoin::IsInitialized() const {
  return true;
}

void ResJoin::Swap(ResJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResJoin::InternalSwap(ResJoin* other) {
  members_.UnsafeArenaSwap(&other->members_);
  std::swap(userid_, other->userid_);
  std::swap(roomid_, other->roomid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResJoin::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResJoin

// int64 userID = 1;
void ResJoin::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResJoin::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ResJoin.userID)
  return userid_;
}
void ResJoin::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ResJoin.userID)
}

// int64 roomID = 2;
void ResJoin::clear_roomid() {
  roomid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResJoin::roomid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ResJoin.roomID)
  return roomid_;
}
void ResJoin::set_roomid(::google::protobuf::int64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ResJoin.roomID)
}

// repeated int64 members = 3;
int ResJoin::members_size() const {
  return members_.size();
}
void ResJoin::clear_members() {
  members_.Clear();
}
::google::protobuf::int64 ResJoin::members(int index) const {
  // @@protoc_insertion_point(field_get:gs_protocol.ResJoin.members)
  return members_.Get(index);
}
void ResJoin::set_members(int index, ::google::protobuf::int64 value) {
  members_.Set(index, value);
  // @@protoc_insertion_point(field_set:gs_protocol.ResJoin.members)
}
void ResJoin::add_members(::google::protobuf::int64 value) {
  members_.Add(value);
  // @@protoc_insertion_point(field_add:gs_protocol.ResJoin.members)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ResJoin::members() const {
  // @@protoc_insertion_point(field_list:gs_protocol.ResJoin.members)
  return members_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ResJoin::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:gs_protocol.ResJoin.members)
  return &members_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResAction1::kUserIDFieldNumber;
const int ResAction1::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResAction1::ResAction1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.ResAction1)
}
ResAction1::ResAction1(const ResAction1& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&userid_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:gs_protocol.ResAction1)
}

void ResAction1::SharedCtor() {
  ::memset(&userid_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&userid_) + sizeof(result_));
  _cached_size_ = 0;
}

ResAction1::~ResAction1() {
  // @@protoc_insertion_point(destructor:gs_protocol.ResAction1)
  SharedDtor();
}

void ResAction1::SharedDtor() {
}

void ResAction1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResAction1::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[10].descriptor;
}

const ResAction1& ResAction1::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResAction1* ResAction1::New(::google::protobuf::Arena* arena) const {
  ResAction1* n = new ResAction1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResAction1::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.ResAction1)
  ::memset(&userid_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&userid_) + sizeof(result_));
}

bool ResAction1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.ResAction1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.ResAction1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.ResAction1)
  return false;
#undef DO_
}

void ResAction1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.ResAction1)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.ResAction1)
}

::google::protobuf::uint8* ResAction1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.ResAction1)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.ResAction1)
  return target;
}

size_t ResAction1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.ResAction1)
  size_t total_size = 0;

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResAction1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.ResAction1)
  GOOGLE_DCHECK_NE(&from, this);
  const ResAction1* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResAction1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.ResAction1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.ResAction1)
    MergeFrom(*source);
  }
}

void ResAction1::MergeFrom(const ResAction1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.ResAction1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void ResAction1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.ResAction1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResAction1::CopyFrom(const ResAction1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.ResAction1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResAction1::IsInitialized() const {
  return true;
}

void ResAction1::Swap(ResAction1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResAction1::InternalSwap(ResAction1* other) {
  std::swap(userid_, other->userid_);
  std::swap(result_, other->result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResAction1::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResAction1

// int64 userID = 1;
void ResAction1::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResAction1::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ResAction1.userID)
  return userid_;
}
void ResAction1::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ResAction1.userID)
}

// int32 result = 2;
void ResAction1::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 ResAction1::result() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ResAction1.result)
  return result_;
}
void ResAction1::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ResAction1.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResQuit::kUserIDFieldNumber;
const int ResQuit::kIsSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResQuit::ResQuit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.ResQuit)
}
ResQuit::ResQuit(const ResQuit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    reinterpret_cast<char*>(&issuccess_) -
    reinterpret_cast<char*>(&userid_) + sizeof(issuccess_));
  // @@protoc_insertion_point(copy_constructor:gs_protocol.ResQuit)
}

void ResQuit::SharedCtor() {
  ::memset(&userid_, 0, reinterpret_cast<char*>(&issuccess_) -
    reinterpret_cast<char*>(&userid_) + sizeof(issuccess_));
  _cached_size_ = 0;
}

ResQuit::~ResQuit() {
  // @@protoc_insertion_point(destructor:gs_protocol.ResQuit)
  SharedDtor();
}

void ResQuit::SharedDtor() {
}

void ResQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResQuit::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[11].descriptor;
}

const ResQuit& ResQuit::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResQuit* ResQuit::New(::google::protobuf::Arena* arena) const {
  ResQuit* n = new ResQuit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResQuit::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.ResQuit)
  ::memset(&userid_, 0, reinterpret_cast<char*>(&issuccess_) -
    reinterpret_cast<char*>(&userid_) + sizeof(issuccess_));
}

bool ResQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.ResQuit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 isSuccess = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.ResQuit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.ResQuit)
  return false;
#undef DO_
}

void ResQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.ResQuit)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // int32 isSuccess = 2;
  if (this->issuccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->issuccess(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.ResQuit)
}

::google::protobuf::uint8* ResQuit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.ResQuit)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // int32 isSuccess = 2;
  if (this->issuccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->issuccess(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.ResQuit)
  return target;
}

size_t ResQuit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.ResQuit)
  size_t total_size = 0;

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  // int32 isSuccess = 2;
  if (this->issuccess() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->issuccess());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResQuit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.ResQuit)
  GOOGLE_DCHECK_NE(&from, this);
  const ResQuit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResQuit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.ResQuit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.ResQuit)
    MergeFrom(*source);
  }
}

void ResQuit::MergeFrom(const ResQuit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.ResQuit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.issuccess() != 0) {
    set_issuccess(from.issuccess());
  }
}

void ResQuit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.ResQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResQuit::CopyFrom(const ResQuit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.ResQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResQuit::IsInitialized() const {
  return true;
}

void ResQuit::Swap(ResQuit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResQuit::InternalSwap(ResQuit* other) {
  std::swap(userid_, other->userid_);
  std::swap(issuccess_, other->issuccess_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResQuit::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResQuit

// int64 userID = 1;
void ResQuit::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResQuit::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ResQuit.userID)
  return userid_;
}
void ResQuit::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ResQuit.userID)
}

// int32 isSuccess = 2;
void ResQuit::clear_issuccess() {
  issuccess_ = 0;
}
::google::protobuf::int32 ResQuit::issuccess() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ResQuit.isSuccess)
  return issuccess_;
}
void ResQuit::set_issuccess(::google::protobuf::int32 value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ResQuit.isSuccess)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResRoomList::kUserIDFieldNumber;
const int ResRoomList::kRoomIDsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResRoomList::ResRoomList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.ResRoomList)
}
ResRoomList::ResRoomList(const ResRoomList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      roomids_(from.roomids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:gs_protocol.ResRoomList)
}

void ResRoomList::SharedCtor() {
  userid_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

ResRoomList::~ResRoomList() {
  // @@protoc_insertion_point(destructor:gs_protocol.ResRoomList)
  SharedDtor();
}

void ResRoomList::SharedDtor() {
}

void ResRoomList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResRoomList::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[12].descriptor;
}

const ResRoomList& ResRoomList::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResRoomList* ResRoomList::New(::google::protobuf::Arena* arena) const {
  ResRoomList* n = new ResRoomList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResRoomList::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.ResRoomList)
  roomids_.Clear();
  userid_ = GOOGLE_LONGLONG(0);
}

bool ResRoomList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.ResRoomList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 roomIDs = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_roomids())));
        } else if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_roomids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.ResRoomList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.ResRoomList)
  return false;
#undef DO_
}

void ResRoomList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.ResRoomList)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // repeated int64 roomIDs = 2;
  if (this->roomids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_roomids_cached_byte_size_);
  }
  for (int i = 0; i < this->roomids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->roomids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.ResRoomList)
}

::google::protobuf::uint8* ResRoomList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.ResRoomList)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // repeated int64 roomIDs = 2;
  if (this->roomids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _roomids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->roomids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->roomids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.ResRoomList)
  return target;
}

size_t ResRoomList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.ResRoomList)
  size_t total_size = 0;

  // repeated int64 roomIDs = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->roomids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _roomids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResRoomList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.ResRoomList)
  GOOGLE_DCHECK_NE(&from, this);
  const ResRoomList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResRoomList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.ResRoomList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.ResRoomList)
    MergeFrom(*source);
  }
}

void ResRoomList::MergeFrom(const ResRoomList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.ResRoomList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomids_.MergeFrom(from.roomids_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void ResRoomList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.ResRoomList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResRoomList::CopyFrom(const ResRoomList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.ResRoomList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResRoomList::IsInitialized() const {
  return true;
}

void ResRoomList::Swap(ResRoomList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResRoomList::InternalSwap(ResRoomList* other) {
  roomids_.UnsafeArenaSwap(&other->roomids_);
  std::swap(userid_, other->userid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResRoomList::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResRoomList

// int64 userID = 1;
void ResRoomList::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResRoomList::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ResRoomList.userID)
  return userid_;
}
void ResRoomList::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ResRoomList.userID)
}

// repeated int64 roomIDs = 2;
int ResRoomList::roomids_size() const {
  return roomids_.size();
}
void ResRoomList::clear_roomids() {
  roomids_.Clear();
}
::google::protobuf::int64 ResRoomList::roomids(int index) const {
  // @@protoc_insertion_point(field_get:gs_protocol.ResRoomList.roomIDs)
  return roomids_.Get(index);
}
void ResRoomList::set_roomids(int index, ::google::protobuf::int64 value) {
  roomids_.Set(index, value);
  // @@protoc_insertion_point(field_set:gs_protocol.ResRoomList.roomIDs)
}
void ResRoomList::add_roomids(::google::protobuf::int64 value) {
  roomids_.Add(value);
  // @@protoc_insertion_point(field_add:gs_protocol.ResRoomList.roomIDs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ResRoomList::roomids() const {
  // @@protoc_insertion_point(field_list:gs_protocol.ResRoomList.roomIDs)
  return roomids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ResRoomList::mutable_roomids() {
  // @@protoc_insertion_point(field_mutable_list:gs_protocol.ResRoomList.roomIDs)
  return &roomids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyJoinMsg::kUserIDFieldNumber;
const int NotifyJoinMsg::kRoomIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyJoinMsg::NotifyJoinMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.NotifyJoinMsg)
}
NotifyJoinMsg::NotifyJoinMsg(const NotifyJoinMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:gs_protocol.NotifyJoinMsg)
}

void NotifyJoinMsg::SharedCtor() {
  ::memset(&userid_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
  _cached_size_ = 0;
}

NotifyJoinMsg::~NotifyJoinMsg() {
  // @@protoc_insertion_point(destructor:gs_protocol.NotifyJoinMsg)
  SharedDtor();
}

void NotifyJoinMsg::SharedDtor() {
}

void NotifyJoinMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyJoinMsg::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[13].descriptor;
}

const NotifyJoinMsg& NotifyJoinMsg::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyJoinMsg* NotifyJoinMsg::New(::google::protobuf::Arena* arena) const {
  NotifyJoinMsg* n = new NotifyJoinMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotifyJoinMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.NotifyJoinMsg)
  ::memset(&userid_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
}

bool NotifyJoinMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.NotifyJoinMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 roomID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.NotifyJoinMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.NotifyJoinMsg)
  return false;
#undef DO_
}

void NotifyJoinMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.NotifyJoinMsg)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roomid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.NotifyJoinMsg)
}

::google::protobuf::uint8* NotifyJoinMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.NotifyJoinMsg)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roomid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.NotifyJoinMsg)
  return target;
}

size_t NotifyJoinMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.NotifyJoinMsg)
  size_t total_size = 0;

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyJoinMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.NotifyJoinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyJoinMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyJoinMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.NotifyJoinMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.NotifyJoinMsg)
    MergeFrom(*source);
  }
}

void NotifyJoinMsg::MergeFrom(const NotifyJoinMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.NotifyJoinMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void NotifyJoinMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.NotifyJoinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyJoinMsg::CopyFrom(const NotifyJoinMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.NotifyJoinMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyJoinMsg::IsInitialized() const {
  return true;
}

void NotifyJoinMsg::Swap(NotifyJoinMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyJoinMsg::InternalSwap(NotifyJoinMsg* other) {
  std::swap(userid_, other->userid_);
  std::swap(roomid_, other->roomid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyJoinMsg::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyJoinMsg

// int64 userID = 1;
void NotifyJoinMsg::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NotifyJoinMsg::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.NotifyJoinMsg.userID)
  return userid_;
}
void NotifyJoinMsg::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.NotifyJoinMsg.userID)
}

// int64 roomID = 2;
void NotifyJoinMsg::clear_roomid() {
  roomid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NotifyJoinMsg::roomid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.NotifyJoinMsg.roomID)
  return roomid_;
}
void NotifyJoinMsg::set_roomid(::google::protobuf::int64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.NotifyJoinMsg.roomID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyAction1Msg::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyAction1Msg::NotifyAction1Msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.NotifyAction1Msg)
}
NotifyAction1Msg::NotifyAction1Msg(const NotifyAction1Msg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:gs_protocol.NotifyAction1Msg)
}

void NotifyAction1Msg::SharedCtor() {
  userid_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

NotifyAction1Msg::~NotifyAction1Msg() {
  // @@protoc_insertion_point(destructor:gs_protocol.NotifyAction1Msg)
  SharedDtor();
}

void NotifyAction1Msg::SharedDtor() {
}

void NotifyAction1Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAction1Msg::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[14].descriptor;
}

const NotifyAction1Msg& NotifyAction1Msg::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyAction1Msg* NotifyAction1Msg::New(::google::protobuf::Arena* arena) const {
  NotifyAction1Msg* n = new NotifyAction1Msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotifyAction1Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.NotifyAction1Msg)
  userid_ = GOOGLE_LONGLONG(0);
}

bool NotifyAction1Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.NotifyAction1Msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.NotifyAction1Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.NotifyAction1Msg)
  return false;
#undef DO_
}

void NotifyAction1Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.NotifyAction1Msg)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.NotifyAction1Msg)
}

::google::protobuf::uint8* NotifyAction1Msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.NotifyAction1Msg)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.NotifyAction1Msg)
  return target;
}

size_t NotifyAction1Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.NotifyAction1Msg)
  size_t total_size = 0;

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAction1Msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.NotifyAction1Msg)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyAction1Msg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyAction1Msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.NotifyAction1Msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.NotifyAction1Msg)
    MergeFrom(*source);
  }
}

void NotifyAction1Msg::MergeFrom(const NotifyAction1Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.NotifyAction1Msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
}

void NotifyAction1Msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.NotifyAction1Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAction1Msg::CopyFrom(const NotifyAction1Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.NotifyAction1Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAction1Msg::IsInitialized() const {
  return true;
}

void NotifyAction1Msg::Swap(NotifyAction1Msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyAction1Msg::InternalSwap(NotifyAction1Msg* other) {
  std::swap(userid_, other->userid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyAction1Msg::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyAction1Msg

// int64 userID = 1;
void NotifyAction1Msg::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NotifyAction1Msg::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.NotifyAction1Msg.userID)
  return userid_;
}
void NotifyAction1Msg::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.NotifyAction1Msg.userID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyQuitMsg::kUserIDFieldNumber;
const int NotifyQuitMsg::kRoomIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyQuitMsg::NotifyQuitMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.NotifyQuitMsg)
}
NotifyQuitMsg::NotifyQuitMsg(const NotifyQuitMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&userid_, &from.userid_,
    reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
  // @@protoc_insertion_point(copy_constructor:gs_protocol.NotifyQuitMsg)
}

void NotifyQuitMsg::SharedCtor() {
  ::memset(&userid_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
  _cached_size_ = 0;
}

NotifyQuitMsg::~NotifyQuitMsg() {
  // @@protoc_insertion_point(destructor:gs_protocol.NotifyQuitMsg)
  SharedDtor();
}

void NotifyQuitMsg::SharedDtor() {
}

void NotifyQuitMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyQuitMsg::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[15].descriptor;
}

const NotifyQuitMsg& NotifyQuitMsg::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyQuitMsg* NotifyQuitMsg::New(::google::protobuf::Arena* arena) const {
  NotifyQuitMsg* n = new NotifyQuitMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotifyQuitMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.NotifyQuitMsg)
  ::memset(&userid_, 0, reinterpret_cast<char*>(&roomid_) -
    reinterpret_cast<char*>(&userid_) + sizeof(roomid_));
}

bool NotifyQuitMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.NotifyQuitMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 userID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &userid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 roomID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.NotifyQuitMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.NotifyQuitMsg)
  return false;
#undef DO_
}

void NotifyQuitMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.NotifyQuitMsg)
  // int64 userID = 1;
  if (this->userid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->userid(), output);
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->roomid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.NotifyQuitMsg)
}

::google::protobuf::uint8* NotifyQuitMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.NotifyQuitMsg)
  // int64 userID = 1;
  if (this->userid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->userid(), target);
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->roomid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.NotifyQuitMsg)
  return target;
}

size_t NotifyQuitMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.NotifyQuitMsg)
  size_t total_size = 0;

  // int64 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->userid());
  }

  // int64 roomID = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->roomid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyQuitMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.NotifyQuitMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyQuitMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyQuitMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.NotifyQuitMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.NotifyQuitMsg)
    MergeFrom(*source);
  }
}

void NotifyQuitMsg::MergeFrom(const NotifyQuitMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.NotifyQuitMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.userid() != 0) {
    set_userid(from.userid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
}

void NotifyQuitMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.NotifyQuitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyQuitMsg::CopyFrom(const NotifyQuitMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.NotifyQuitMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyQuitMsg::IsInitialized() const {
  return true;
}

void NotifyQuitMsg::Swap(NotifyQuitMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyQuitMsg::InternalSwap(NotifyQuitMsg* other) {
  std::swap(userid_, other->userid_);
  std::swap(roomid_, other->roomid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyQuitMsg::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyQuitMsg

// int64 userID = 1;
void NotifyQuitMsg::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NotifyQuitMsg::userid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.NotifyQuitMsg.userID)
  return userid_;
}
void NotifyQuitMsg::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.NotifyQuitMsg.userID)
}

// int64 roomID = 2;
void NotifyQuitMsg::clear_roomid() {
  roomid_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NotifyQuitMsg::roomid() const {
  // @@protoc_insertion_point(field_get:gs_protocol.NotifyQuitMsg.roomID)
  return roomid_;
}
void NotifyQuitMsg::set_roomid(::google::protobuf::int64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.NotifyQuitMsg.roomID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorMsg::kErrCodeFieldNumber;
const int ErrorMsg::kErrMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorMsg::ErrorMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gs_protocol.ErrorMsg)
}
ErrorMsg::ErrorMsg(const ErrorMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmessage().size() > 0) {
    errmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmessage_);
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:gs_protocol.ErrorMsg)
}

void ErrorMsg::SharedCtor() {
  errmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  _cached_size_ = 0;
}

ErrorMsg::~ErrorMsg() {
  // @@protoc_insertion_point(destructor:gs_protocol.ErrorMsg)
  SharedDtor();
}

void ErrorMsg::SharedDtor() {
  errmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ErrorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorMsg::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[16].descriptor;
}

const ErrorMsg& ErrorMsg::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ErrorMsg* ErrorMsg::New(::google::protobuf::Arena* arena) const {
  ErrorMsg* n = new ErrorMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrorMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:gs_protocol.ErrorMsg)
  errmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

bool ErrorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gs_protocol.ErrorMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 errCode = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errMessage = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmessage().data(), this->errmessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gs_protocol.ErrorMsg.errMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gs_protocol.ErrorMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gs_protocol.ErrorMsg)
  return false;
#undef DO_
}

void ErrorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gs_protocol.ErrorMsg)
  // int32 errCode = 1;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errcode(), output);
  }

  // string errMessage = 2;
  if (this->errmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmessage().data(), this->errmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gs_protocol.ErrorMsg.errMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmessage(), output);
  }

  // @@protoc_insertion_point(serialize_end:gs_protocol.ErrorMsg)
}

::google::protobuf::uint8* ErrorMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gs_protocol.ErrorMsg)
  // int32 errCode = 1;
  if (this->errcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errcode(), target);
  }

  // string errMessage = 2;
  if (this->errmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmessage().data(), this->errmessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gs_protocol.ErrorMsg.errMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmessage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gs_protocol.ErrorMsg)
  return target;
}

size_t ErrorMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gs_protocol.ErrorMsg)
  size_t total_size = 0;

  // string errMessage = 2;
  if (this->errmessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmessage());
  }

  // int32 errCode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gs_protocol.ErrorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrorMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gs_protocol.ErrorMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gs_protocol.ErrorMsg)
    MergeFrom(*source);
  }
}

void ErrorMsg::MergeFrom(const ErrorMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gs_protocol.ErrorMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.errmessage().size() > 0) {

    errmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmessage_);
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void ErrorMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gs_protocol.ErrorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorMsg::CopyFrom(const ErrorMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gs_protocol.ErrorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMsg::IsInitialized() const {
  return true;
}

void ErrorMsg::Swap(ErrorMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorMsg::InternalSwap(ErrorMsg* other) {
  errmessage_.Swap(&other->errmessage_);
  std::swap(errcode_, other->errcode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ErrorMsg::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrorMsg

// int32 errCode = 1;
void ErrorMsg::clear_errcode() {
  errcode_ = 0;
}
::google::protobuf::int32 ErrorMsg::errcode() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ErrorMsg.errCode)
  return errcode_;
}
void ErrorMsg::set_errcode(::google::protobuf::int32 value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:gs_protocol.ErrorMsg.errCode)
}

// string errMessage = 2;
void ErrorMsg::clear_errmessage() {
  errmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ErrorMsg::errmessage() const {
  // @@protoc_insertion_point(field_get:gs_protocol.ErrorMsg.errMessage)
  return errmessage_.GetNoArena();
}
void ErrorMsg::set_errmessage(const ::std::string& value) {
  
  errmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gs_protocol.ErrorMsg.errMessage)
}
#if LANG_CXX11
void ErrorMsg::set_errmessage(::std::string&& value) {
  
  errmessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gs_protocol.ErrorMsg.errMessage)
}
#endif
void ErrorMsg::set_errmessage(const char* value) {
  
  errmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gs_protocol.ErrorMsg.errMessage)
}
void ErrorMsg::set_errmessage(const char* value, size_t size) {
  
  errmessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gs_protocol.ErrorMsg.errMessage)
}
::std::string* ErrorMsg::mutable_errmessage() {
  
  // @@protoc_insertion_point(field_mutable:gs_protocol.ErrorMsg.errMessage)
  return errmessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ErrorMsg::release_errmessage() {
  // @@protoc_insertion_point(field_release:gs_protocol.ErrorMsg.errMessage)
  
  return errmessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ErrorMsg::set_allocated_errmessage(::std::string* errmessage) {
  if (errmessage != NULL) {
    
  } else {
    
  }
  errmessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmessage);
  // @@protoc_insertion_point(field_set_allocated:gs_protocol.ErrorMsg.errMessage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gs_protocol

// @@protoc_insertion_point(global_scope)
